import base64
import json
import xml.etree.ElementTree as ET
import html

import pandas as pd
from bs4 import BeautifulSoup

# Функция для парсинга XML и извлечения HTML-содержимого
def html_from_xml(xml_data):
    # Парсинг XML
    root = ET.fromstring(xml_data)
    # Нахождение элемента fileContent и декодирование HTML-содержимого
    html_content = html.unescape(root.find('.//fileContent').text)
    return html_content

# Функция для преобразования HTML в текст
def convert_html_to_text(html_content):
    soup = BeautifulSoup(html_content, features="html.parser")
    return soup.get_text('\n').replace('\r\n', ' ')

def xml_from_hash(hash):
    content = base64.standard_b64decode(base64.standard_b64decode(hash)).decode('utf-8')
    return content
def text_from_hash(hash):
    content = xml_from_hash(hash)
    try:
        html_content = html_from_xml(content)
    except:
        html_content = json.loads(content)["fileContent"]
    text = convert_html_to_text(html_content)
    text = remove_new_lines(text)
    return text

def remove_new_lines(text):
    text = text.replace("\xa0", ' ')
    while ' \n' in text:
        text = text.replace(' \n', '\n')
    while '\n ' in text:
        text = text.replace('\n ', '\n')
    while '\n\n' in text:
        text = text.replace('\n\n', '\n')
    print('Всего строк', len(text.split('\n')), flush=True)
    return text

if __name__ == '__main__':
    hash = "ZXlKaWRXTnJaWFJPWVcxbElqb2lZM0p0TFdWdFlXbHNJaXdpYjJKcVpXTjBUbUZ0WlNJNkltMXpaMTgwTUdVMFlUaGhOVFpoTjJVd1kyRXlOV1ExT1RGaU5tWTBNR1k1TVRFd1lpSXNJbVpwYkdWRGIyNTBaVzUwSWpvaVhHNDhTRlJOVEQ0OFFrOUVXVDQ4WkdsMlBqeGthWFlnYzNSNWJHVTlYQ0l0ZDJWaWEybDBMWFJsZUhRdGMzUnliMnRsTFhkcFpIUm9PakJ3ZURzZ1ltRmphMmR5YjNWdVpDMWpiMnh2Y2pvalptWm1abVptT3lCamIyeHZjam9qTW1NeVpESmxPeUJtYjI1MExXWmhiV2xzZVRwQmNtbGhiQ3hVWVdodmJXRXNWbVZ5WkdGdVlTeHpZVzV6TFhObGNtbG1PeUJtYjI1MExYTnBlbVU2TVRWd2VEc2dabTl1ZEMxemRIbHNaVHB1YjNKdFlXdzdJR1p2Ym5RdGRtRnlhV0Z1ZEMxallYQnpPbTV2Y20xaGJEc2dabTl1ZEMxMllYSnBZVzUwTFd4cFoyRjBkWEpsY3pwdWIzSnRZV3c3SUdadmJuUXRkMlZwWjJoME9qUXdNRHNnYkdWMGRHVnlMWE53WVdOcGJtYzZibTl5YldGc095QnZjbkJvWVc1ek9qSTdJSFJsZUhRdFlXeHBaMjQ2YzNSaGNuUTdJSFJsZUhRdFpHVmpiM0poZEdsdmJpMWpiMnh2Y2pwcGJtbDBhV0ZzT3lCMFpYaDBMV1JsWTI5eVlYUnBiMjR0YzNSNWJHVTZhVzVwZEdsaGJEc2dkR1Y0ZEMxa1pXTnZjbUYwYVc5dUxYUm9hV05yYm1WemN6cHBibWwwYVdGc095QjBaWGgwTFdsdVpHVnVkRG93Y0hnN0lIUmxlSFF0ZEhKaGJuTm1iM0p0T201dmJtVTdJSGRvYVhSbExYTndZV05sT201dmNtMWhiRHNnZDJsa2IzZHpPakk3SUhkdmNtUXRjM0JoWTJsdVp6b3djSGhjSWo3UXQ5QzAwWURRc05DeTBZSFJndEN5MFlQUXVkR0MwTFVzSU5DZzBMN1F2TkN3MEwwOFhDOWthWFkrUEdScGRpQnpkSGxzWlQxY0lpMTNaV0pyYVhRdGRHVjRkQzF6ZEhKdmEyVXRkMmxrZEdnNk1IQjRPeUJpWVdOclozSnZkVzVrTFdOdmJHOXlPaU5tWm1abVptWTdJR052Ykc5eU9pTXlZekprTW1VN0lHWnZiblF0Wm1GdGFXeDVPa0Z5YVdGc0xGUmhhRzl0WVN4V1pYSmtZVzVoTEhOaGJuTXRjMlZ5YVdZN0lHWnZiblF0YzJsNlpUb3hOWEI0T3lCbWIyNTBMWE4wZVd4bE9tNXZjbTFoYkRzZ1ptOXVkQzEyWVhKcFlXNTBMV05oY0hNNmJtOXliV0ZzT3lCbWIyNTBMWFpoY21saGJuUXRiR2xuWVhSMWNtVnpPbTV2Y20xaGJEc2dabTl1ZEMxM1pXbG5hSFE2TkRBd095QnNaWFIwWlhJdGMzQmhZMmx1WnpwdWIzSnRZV3c3SUc5eWNHaGhibk02TWpzZ2RHVjRkQzFoYkdsbmJqcHpkR0Z5ZERzZ2RHVjRkQzFrWldOdmNtRjBhVzl1TFdOdmJHOXlPbWx1YVhScFlXdzdJSFJsZUhRdFpHVmpiM0poZEdsdmJpMXpkSGxzWlRwcGJtbDBhV0ZzT3lCMFpYaDBMV1JsWTI5eVlYUnBiMjR0ZEdocFkydHVaWE56T21sdWFYUnBZV3c3SUhSbGVIUXRhVzVrWlc1ME9qQndlRHNnZEdWNGRDMTBjbUZ1YzJadmNtMDZibTl1WlRzZ2QyaHBkR1V0YzNCaFkyVTZibTl5YldGc095QjNhV1J2ZDNNNk1qc2dkMjl5WkMxemNHRmphVzVuT2pCd2VGd2lQdEM4MEw3Ump5RFF2OUMrMFlMUmdOQzEwTEhRdmRDKzBZSFJndEdNT2p4Y0wyUnBkajQ4WkdsMklITjBlV3hsUFZ3aUxYZGxZbXRwZEMxMFpYaDBMWE4wY205clpTMTNhV1IwYURvd2NIZzdJR0poWTJ0bmNtOTFibVF0WTI5c2IzSTZJMlptWm1abVpqc2dZMjlzYjNJNkl6SmpNbVF5WlRzZ1ptOXVkQzFtWVcxcGJIazZRWEpwWVd3c1ZHRm9iMjFoTEZabGNtUmhibUVzYzJGdWN5MXpaWEpwWmpzZ1ptOXVkQzF6YVhwbE9qRTFjSGc3SUdadmJuUXRjM1I1YkdVNmJtOXliV0ZzT3lCbWIyNTBMWFpoY21saGJuUXRZMkZ3Y3pwdWIzSnRZV3c3SUdadmJuUXRkbUZ5YVdGdWRDMXNhV2RoZEhWeVpYTTZibTl5YldGc095Qm1iMjUwTFhkbGFXZG9kRG8wTURBN0lHeGxkSFJsY2kxemNHRmphVzVuT201dmNtMWhiRHNnYjNKd2FHRnVjem95T3lCMFpYaDBMV0ZzYVdkdU9uTjBZWEowT3lCMFpYaDBMV1JsWTI5eVlYUnBiMjR0WTI5c2IzSTZhVzVwZEdsaGJEc2dkR1Y0ZEMxa1pXTnZjbUYwYVc5dUxYTjBlV3hsT21sdWFYUnBZV3c3SUhSbGVIUXRaR1ZqYjNKaGRHbHZiaTEwYUdsamEyNWxjM002YVc1cGRHbGhiRHNnZEdWNGRDMXBibVJsYm5RNk1IQjRPeUIwWlhoMExYUnlZVzV6Wm05eWJUcHViMjVsT3lCM2FHbDBaUzF6Y0dGalpUcHViM0p0WVd3N0lIZHBaRzkzY3pveU95QjNiM0prTFhOd1lXTnBibWM2TUhCNFhDSSswWUhRdGRHQzBMclFzQ0RSZ2RDeTBMRFJnTkM5MExEUmp5QTFNTkdGTlREUmhUTWdLTkNTMEtBeEtTWnVZbk53T3lBeE9UQXcwWVV4TURBd0ptNWljM0E3SUNadVluTndPMXgxTWpBeE5DWnVZbk53T3pJbWJtSnpjRHZSaU5HQ0xEeGNMMlJwZGo0OFpHbDJJSE4wZVd4bFBWd2lMWGRsWW10cGRDMTBaWGgwTFhOMGNtOXJaUzEzYVdSMGFEb3djSGc3SUdKaFkydG5jbTkxYm1RdFkyOXNiM0k2STJabVptWm1aanNnWTI5c2IzSTZJekpqTW1ReVpUc2dabTl1ZEMxbVlXMXBiSGs2UVhKcFlXd3NWR0ZvYjIxaExGWmxjbVJoYm1Fc2MyRnVjeTF6WlhKcFpqc2dabTl1ZEMxemFYcGxPakUxY0hnN0lHWnZiblF0YzNSNWJHVTZibTl5YldGc095Qm1iMjUwTFhaaGNtbGhiblF0WTJGd2N6cHViM0p0WVd3N0lHWnZiblF0ZG1GeWFXRnVkQzFzYVdkaGRIVnlaWE02Ym05eWJXRnNPeUJtYjI1MExYZGxhV2RvZERvME1EQTdJR3hsZEhSbGNpMXpjR0ZqYVc1bk9tNXZjbTFoYkRzZ2IzSndhR0Z1Y3pveU95QjBaWGgwTFdGc2FXZHVPbk4wWVhKME95QjBaWGgwTFdSbFkyOXlZWFJwYjI0dFkyOXNiM0k2YVc1cGRHbGhiRHNnZEdWNGRDMWtaV052Y21GMGFXOXVMWE4wZVd4bE9tbHVhWFJwWVd3N0lIUmxlSFF0WkdWamIzSmhkR2x2YmkxMGFHbGphMjVsYzNNNmFXNXBkR2xoYkRzZ2RHVjRkQzFwYm1SbGJuUTZNSEI0T3lCMFpYaDBMWFJ5WVc1elptOXliVHB1YjI1bE95QjNhR2wwWlMxemNHRmpaVHB1YjNKdFlXdzdJSGRwWkc5M2N6b3lPeUIzYjNKa0xYTndZV05wYm1jNk1IQjRYQ0krMFlIUXRkR0MwTHJRc0NEUmdkQ3kwTERSZ05DOTBMRFJqeUF4TlREUmhUVXcwWVV6SUNqUWt0Q2dLU1p1WW5Od095QXlNVEF3MFlVeE1EQXdKbTVpYzNBN0lDWnVZbk53TzF4MU1qQXhOQ1p1WW5Od095QW1ibUp6Y0RzeElOR0kwWUlzSm01aWMzQTdQRnd2WkdsMlBqeGthWFlnYzNSNWJHVTlYQ0l0ZDJWaWEybDBMWFJsZUhRdGMzUnliMnRsTFhkcFpIUm9PakJ3ZURzZ1ltRmphMmR5YjNWdVpDMWpiMnh2Y2pvalptWm1abVptT3lCamIyeHZjam9qTW1NeVpESmxPeUJtYjI1MExXWmhiV2xzZVRwQmNtbGhiQ3hVWVdodmJXRXNWbVZ5WkdGdVlTeHpZVzV6TFhObGNtbG1PeUJtYjI1MExYTnBlbVU2TVRWd2VEc2dabTl1ZEMxemRIbHNaVHB1YjNKdFlXdzdJR1p2Ym5RdGRtRnlhV0Z1ZEMxallYQnpPbTV2Y20xaGJEc2dabTl1ZEMxMllYSnBZVzUwTFd4cFoyRjBkWEpsY3pwdWIzSnRZV3c3SUdadmJuUXRkMlZwWjJoME9qUXdNRHNnYkdWMGRHVnlMWE53WVdOcGJtYzZibTl5YldGc095QnZjbkJvWVc1ek9qSTdJSFJsZUhRdFlXeHBaMjQ2YzNSaGNuUTdJSFJsZUhRdFpHVmpiM0poZEdsdmJpMWpiMnh2Y2pwcGJtbDBhV0ZzT3lCMFpYaDBMV1JsWTI5eVlYUnBiMjR0YzNSNWJHVTZhVzVwZEdsaGJEc2dkR1Y0ZEMxa1pXTnZjbUYwYVc5dUxYUm9hV05yYm1WemN6cHBibWwwYVdGc095QjBaWGgwTFdsdVpHVnVkRG93Y0hnN0lIUmxlSFF0ZEhKaGJuTm1iM0p0T201dmJtVTdJSGRvYVhSbExYTndZV05sT201dmNtMWhiRHNnZDJsa2IzZHpPakk3SUhkdmNtUXRjM0JoWTJsdVp6b3djSGhjSWo3UmdkQzEwWUxRdXRDd0lOR0IwTExRc05HQTBMM1FzTkdQSURFMU1OR0ZOVERSaFRNZ0tOQ1MwS0FwSm01aWMzQTdPRFUxSU5HRklERTVNREFtYm1KemNEc2dKbTVpYzNBN1hIVXlNREUwSm01aWMzQTdJQ1p1WW5Od096SWcwWWpSZ2p4Y0wyUnBkajQ4WEM5a2FYWStQR1JwZGo0bWJtSnpjRHM4WEM5a2FYWStQR1JwZGlCa1lYUmhMWE5wWjI1aGRIVnlaUzEzYVdSblpYUTlYQ0pqYjI1MFlXbHVaWEpjSWo0OFpHbDJJR1JoZEdFdGMybG5ibUYwZFhKbExYZHBaR2RsZEQxY0ltTnZiblJsYm5SY0lqNDhaR2wyUGkwdFBHSnlQdENTMExYUXROR0QwWW5RdU5DNUlOR0IwTC9RdGRHRzBMalFzTkM3MExqUmdkR0NJTkMvMEw0ZzBZSFF2ZEN3MExIUXR0QzEwTDNRdU5HT0lOQ2UwSjdRbmlEUWw5Q2MwTGpRbTlDYUlOR0NMamdvTXpreEtTQXlNelF0TnpZdE5UYzhZbkkrMEo3Umd0Qy8wWURRc05DeTBMdlF0ZEM5MEw0ZzBMalF0eURRbjlDKzBZZlJndEdMSUR4aElHaHlaV1k5WENKb2RIUndjem92TDNSeWF5NXRZV2xzTG5KMUwyTXZlbnB0T1RjNVhDSStUV0ZwYkR4Y0wyRStQRnd2WkdsMlBqeGNMMlJwZGo0OFhDOWthWFkrUEZ3dlFrOUVXVDQ4WEM5SVZFMU1QbHh1SW4wPQ=="
    text = text_from_hash(hash)
    print(text)
