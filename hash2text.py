import base64
import json
import xml.etree.ElementTree as ET
import html

import pandas as pd
from bs4 import BeautifulSoup

# Функция для парсинга XML и извлечения HTML-содержимого
def html_from_xml(xml_data):
    # Парсинг XML
    root = ET.fromstring(xml_data)
    # Нахождение элемента fileContent и декодирование HTML-содержимого
    html_content = html.unescape(root.find('.//fileContent').text)
    return html_content

# Функция для преобразования HTML в текст
def convert_html_to_text(html_content):
    soup = BeautifulSoup(html_content, features="html.parser")
    return soup.get_text('\n').replace('\r\n', ' ')

def xml_from_hash(hash):
    content = base64.standard_b64decode(base64.standard_b64decode(hash)).decode('utf-8')
    return content
def text_from_hash(hash):
    content = xml_from_hash(hash)
    try:
        html_content = html_from_xml(content)
    except:
        html_content = json.loads(content)["fileContent"]
    text = convert_html_to_text(html_content)
    text = remove_new_lines(text)
    return text

def remove_new_lines(text):
    text = text.replace("\xa0", ' ')
    while ' \n' in text:
        text = text.replace(' \n', '\n')
    while '\n ' in text:
        text = text.replace('\n ', '\n')
    while '\n\n' in text:
        text = text.replace('\n\n', '\n')
    print('Всего строк', len(text.split('\n')), flush=True)
    return text

if __name__ == '__main__':
    # hash = ""
    df = pd.read_csv("data/Selected_Emails.csv")
    texts = []
    for hash in df['Base64 Encoded Email']:
        text = text_from_hash(hash)
        texts += [text]
        texts += ['%'*20]
        # print(text)
    pd.DataFrame({'Only_text':texts}).to_csv("data/Selected_only_text.csv", index=False)
