import csv
import time
import os
import pickle
import numpy as np
import faiss
import json
from concurrent.futures import ThreadPoolExecutor, as_completed

from order_recognition.core.hash2text import text_from_hash
from langchain.docstore.document import Document
from langchain_community.docstore.in_memory import InMemoryDocstore
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_community.vectorstores import FAISS
from yandex_cloud_ml_sdk import YCloudML
from yandexgpt import custom_yandex_gpt
from order_recognition.confs import config

class MaterialSelector:
    def __init__(self, csv_path: str, folder_id: str,
                 embedding_cache_file: str = "order_recognition/data/embeddings_cache.pkl",
                 chunk_size: int = 1, chunk_overlap: int = 0,
                 model_name: str = "cointegrated/rubert-tiny2"):
        """
        Инициализация:
          - Загружает материалы из CSV‑файла с объединением нескольких строк в один документ.
          - Создает FAISS‑индекс с использованием эмбеддингов модели cointegrated/rubert-tiny2.
          - Сохраняет/подгружает эмбеддинги для документов.
          - Инициализирует YandexGPT для подбора лучших материалов.
          - Инициализирует объект для извлечения позиций из чистого письма.
        
        Параметры:
          csv_path: путь к CSV‑файлу с материалами.
          folder_id: идентификатор каталога для YandexCloud.
          embedding_cache_file: путь к файлу кэша эмбеддингов.
          chunk_size: число строк, объединяемых в один документ.
          chunk_overlap: количество строк перекрытия между соседними документами.
          model_name: имя модели эмбеддингов (по умолчанию "cointegrated/rubert-tiny2").
        """
        self.csv_path = csv_path
        self.folder_id = folder_id
        self.embedding_cache_file = embedding_cache_file
        self.chunk_size = chunk_size
        self.chunk_overlap = chunk_overlap

        # Объект для извлечения позиций из письма
        self.position_extractor = custom_yandex_gpt()
        self.position_extractor.update_token()
        self.iam_token = self.position_extractor.headers["Authorization"][7:]

        # Инструкция для системного промпта
        with open("order_recognition/confs/second_gpt_instruct.txt", encoding="utf-8") as f:
            self.system_instruct = f.read().strip()

        # Загружаем материалы
        self.materials = self.load_materials(self.csv_path)

        # Инициализируем эмбеддинги
        self.embeddings = HuggingFaceEmbeddings(model_name=model_name)

        # Загружаем кэш эмбеддингов (если файл существует)
        if os.path.exists(self.embedding_cache_file):
            print("Загружаем кэш эмбеддингов...")
            with open(self.embedding_cache_file, "rb") as f:
                cache = pickle.load(f)
        else:
            print("Кэш эмбеддингов не найден, вычисляем эмбеддинги...")
            cache = {}

        # Вычисляем эмбеддинги для каждого документа (с использованием кэша)
        computed_embeddings = []
        for ind, doc in enumerate(self.materials):
            key = doc.page_content
            if key in cache:
                emb = cache[key]
            else:
                if ind%500==0:
                    print(ind)
                emb = self.embeddings.embed_query(key)
                cache[key] = emb
            computed_embeddings.append(emb)
        print("Эмбэддинги загружены!")

        # Сохраняем обновленный кэш эмбеддингов
        with open(self.embedding_cache_file, "wb") as f:
            pickle.dump(cache, f)

        # Создаём FAISS-индекс
        print("Создаём FAISS-индекс...")
        if computed_embeddings:
            dimension = len(computed_embeddings[0])
            index = faiss.IndexFlatL2(dimension)
            emb_matrix = np.array(computed_embeddings).astype("float32")
            index.add(emb_matrix)
        else:
            raise ValueError("Нет эмбеддингов для создания FAISS‑индекса.")

        # Формируем docstore: ключ – строковый индекс, значение – документ
        docstore = InMemoryDocstore({str(i): doc for i, doc in enumerate(self.materials)})

        # Создаем index_to_docstore_id, сопоставляющий индексы FAISS с идентификаторами документов
        index_to_docstore_id = {i: str(i) for i in range(len(self.materials))}
        self.vectorstore = FAISS(
            embedding_function=self.embeddings,
            index=index,
            docstore=docstore,
            index_to_docstore_id=index_to_docstore_id
        )

        # Модель для уточняющего подбора
        print("Инициализируем модель...")
        self.sdk = YCloudML(folder_id=self.folder_id, auth=self.iam_token)
        self.model = self.sdk.models.completions("yandexgpt").configure(temperature=0.1)

    def load_materials(self, csv_path: str):
        """
        Загружает материалы из CSV‑файла и группирует строки в документы.
        Каждый документ формируется из chunk_size строк с перекрытием chunk_overlap.
        
        При работе с файлом, содержащим более 100 000 записей, группировка строк позволяет
        сократить количество документов для индексирования, что может ускорить поиск и снизить
        нагрузку на память. Однако если требуется высокая детализация поиска по отдельным материалам,
        имеет смысл оставлять одну строку как отдельный документ.
        
        Возвращает список объектов Document.
        """
        with open(csv_path, encoding="utf-8") as f:
            reader = list(csv.DictReader(f))

        documents = []
        step = self.chunk_size - self.chunk_overlap
        for i in range(0, len(reader), step):
            chunk = reader[i: i + self.chunk_size]
            if not chunk:
                break
            lines = []
            material_ids = []
            for row in chunk:
                # Формируем строку: номер материала и полное наименование
                line = f"{row['Полное наименование материала']}"
                lines.append(line)
                material_ids.append(row['Материал'])
            content = "\n".join(lines)
            documents.append(Document(page_content=content, metadata={"Материалы": material_ids}))
        return documents

    def _process_single_position(self, pos_text: str):
        """
        Вспомогательный метод, который обрабатывает одну позицию:
          1. Ищет похожие документы (k=20).
          2. Формирует промпт для модели.
          3. Запрашивает модель и возвращает (pos_text, результат).
        """
        # Шаг 1. Ищем похожие документы
        similar_docs = self.vectorstore.similarity_search(pos_text, k=20)
        print(f"СТРОКИ ДЛЯ {pos_text}:", similar_docs)
        # Собираем номера материалов
        materials_list = [
            "\n".join([f"{m_id}" for m_id in doc.metadata["Материалы"]])
            for doc in similar_docs
        ]

        # Шаг 2. Формируем промпты
        system_message = {"role": "system", "text": self.system_instruct}
        user_message = {
            "role": "user",
            "text": f"Найди для этого текста: {pos_text}\n 5 максимально похожих строк в этих документах:\n" + "\n".join(materials_list)
        }

        # Шаг 3. Запрашиваем модель
        response = self.model.run([system_message, user_message])
        result_text = response[0].text.strip()
        return pos_text, result_text

    def process_email(self, email_content: str):
        """
        Обрабатывает письмо от клиента:
          1. Извлекает позиции.
          2. Запускает каждую позицию на обработку в отдельном потоке (ThreadPool).
          3. Собирает результаты в общий словарь.
        """
        print("Начали искать позиции в письме...")
        positions = self.position_extractor.big_mail(email_content)  # [(pos_text, ...), ...]

        results = {}
        # Запускаем пул потоков
        with ThreadPoolExecutor(max_workers=5) as executor:
            # Создаём задания для каждого pos_text
            future_to_position = {
                executor.submit(self._process_single_position, pos_tuple[0]): pos_tuple[0]
                for pos_tuple in positions
            }

            # Ожидаем завершения
            for future in as_completed(future_to_position):
                pos_text = future_to_position[future]
                try:
                    # Получаем результат
                    key, value = future.result()
                    results[key] = value
                except Exception as e:
                    # В случае ошибки
                    results[pos_text] = f"Ошибка при обработке: {e}"

        return results

if __name__ == '__main__':
    csv_path = "order_recognition/data/mats.csv"
    folder_id = config.xfolderid  # замените на ваш folder_id
    selector = MaterialSelector(csv_path, folder_id)

    email_content = (
        "Здравствуйте, уголок 35x4 ст3пс - 1.3 тн, арматура арматуру 12 480м по 6м., "
        "швеллер 8п-5 штук по 12 метров. Напишите о возможности доставки, спасибо."
    )

    # print("Начало обработки...")
    # start_time = time.time()
    # results = selector.process_email(email_content)
    # end_time = time.time()
    # elapsed_time = end_time - start_time
    # print(f"Время обработки письма: {elapsed_time:.2f} секунд")

    # print("Итоговые результаты подбора материалов:")
    # for pos, res in results.items():
    #     print(f"Позиция: {pos} -> Материалы: {res}")

    hash = ""
    email_content = text_from_hash(hash)
    print("Начало обработки...")
    start_time = time.time()
    results = selector.process_email(email_content)
    end_time = time.time()
    elapsed_time = end_time - start_time
    print(f"Время обработки письма: {elapsed_time:.2f} секунд")

    print("Итоговые результаты подбора материалов:")
    for pos, res in results.items():
        print(f"Позиция: {pos} -> Материалы: {res}")